package com.evidence.blockchainevidence.PaillierT;

import com.alibaba.fastjson.JSONObject;

import java.math.*;
import java.util.*;

public class PaillierT {

    public static final int alpha = 2;
    //beta是用户数，默认为3
    public static final int beta = 3;
    public BigInteger p, q, lambda, x, x1, x2, h, a, g1, KKK, KK1, S, Xsigma, Hsigma;
    public BigInteger[] lambda1 = new BigInteger[alpha];
    public BigInteger[] X = new BigInteger[beta];
    public BigInteger[] H = new BigInteger[beta];

    // n = p*q, where p and q are two large primes.
    public BigInteger n;

    // nsquare = n*n
    public BigInteger nsquare;

    // a random integer in Z*_{n^2} where gcd (L(g^lambda mod n^2), n) = 1.
    public BigInteger g;

    // number of bits of modulus
    private int bitLength;

    public PaillierT(int bitLengthVal, int certainty) {
        KeyGeneration(bitLengthVal, certainty);
    }

    /**
     * Constructs an instance of the Paillier cryptosystem with 512 bits of
     * modulus and at least 1-2^(-64) certainty of primes generation.
     */
    public PaillierT() {
        KeyGeneration(1024, 64);

    }

    public PaillierT(String scp) {
        JSONObject jsonObj = JSONObject.parseObject(scp);

        bitLength=jsonObj.getInteger("bitLength");
        p=jsonObj.getBigInteger("p");
        q=jsonObj.getBigInteger("q");
        a=jsonObj.getBigInteger("a");
        nsquare=jsonObj.getBigInteger("nsquare");
        g1=jsonObj.getBigInteger("g1");
        g=jsonObj.getBigInteger("g");
        n=jsonObj.getBigInteger("n");
        x=jsonObj.getBigInteger("x");
        x1=jsonObj.getBigInteger("x1");
        lambda=jsonObj.getBigInteger("lambda");
        KK1=jsonObj.getBigInteger("KK1");
        KKK=jsonObj.getBigInteger("KKK");
        lambda1[0]=jsonObj.getBigInteger("lambda10");
        lambda1[1]=jsonObj.getBigInteger("lambda11");
        h=jsonObj.getBigInteger("h");


        Xsigma=jsonObj.getBigInteger("Xsigma");
        Hsigma=jsonObj.getBigInteger("Hsigma");
        X[0]=jsonObj.getBigInteger("X0");
        X[1]=jsonObj.getBigInteger("X1");
        X[2]=jsonObj.getBigInteger("X2");
        H[0]=jsonObj.getBigInteger("H0");
        H[1]=jsonObj.getBigInteger("H1");
        H[2]=jsonObj.getBigInteger("2");
    }

    public String toString(){
        JSONObject cp=new JSONObject();
        cp.put("bitLength",bitLength);
        cp.put("p",p);
        cp.put("q",q);
        cp.put("a",a);
        cp.put("nsquare",nsquare);
        cp.put("g1",g1);
        cp.put("g",g);
        cp.put("n",n);
        cp.put("x",x);
        cp.put("x1",x1);
        cp.put("lambda",lambda);
        cp.put("KK1",KK1);
        cp.put("KKK",KKK);
        cp.put("S",S);
        cp.put("lambda10",lambda1[0]);
        cp.put("lambda11",lambda1[1]);
        cp.put("h",h);


        cp.put("Xsigma",Xsigma);
        cp.put("Hsigma",Hsigma);
        cp.put("X0",X[0]);
        cp.put("X1",X[1]);
        cp.put("X2",X[2]);
        cp.put("H0",H[0]);
        cp.put("H1",H[1]);
        cp.put("H2",H[2]);


        return cp.toString();
    }




    /**
     * 生成paillier的参数
     * @param bitLengthVal
     * @param certainty
     */
    public void KeyGeneration(int bitLengthVal, int certainty) {
        bitLength = bitLengthVal;

        /**
         * Constructs two randomly generated positive BigIntegers that are
         * probably prime, with the specified bitLength and certainty.
         */
        p = new BigInteger(bitLength / 2, certainty, new Random());
        q = new BigInteger(bitLength / 2, certainty, new Random());

        a = new BigInteger(bitLength / 2, certainty, new Random());

        n = p.multiply(q);
        nsquare = n.multiply(n);
        g1 = new BigInteger("2");
        g = BigInteger.ZERO.subtract(a.modPow(g1.multiply(n), nsquare)).mod(nsquare);

        x = new BigInteger(bitLength / 2, certainty, new Random());
        Xsigma = BigInteger.ZERO;

        x1 = new BigInteger(bitLength / 4, certainty, new Random());
        lambda = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE))
                .divide(p.subtract(BigInteger.ONE).gcd(q.subtract(BigInteger.ONE)));
        KK1 = lambda.multiply(nsquare);
        KKK = lambda.modInverse(nsquare);
        S = lambda.multiply(KKK).mod(KK1);

        lambda1[alpha - 1] = S;
        for (int ii = 0; ii < (alpha - 1); ii++) {
            lambda1[ii] = new BigInteger(bitLength, certainty, new Random());

            lambda1[alpha - 1] = lambda1[alpha - 1].subtract(lambda1[ii]);
        }

        for (int ii = 0; ii < beta; ii++) {
            X[ii] = new BigInteger(bitLength - 12, certainty, new Random());

            H[ii] = g.modPow(X[ii], nsquare);

            Xsigma = Xsigma.add(X[ii]);
        }
        Hsigma = g.modPow(Xsigma, nsquare);

        h = g.modPow(x, nsquare);

        /* check whether g is good. */
        // if (g.modPow(lambda,
        // nsquare).subtract(BigInteger.ONE).divide(n).gcd(n).intValue() != 1) {
        // System.out.println("g is not good. Choose g again.");
        // System.exit(1);
        // }
    }

    //h是公钥
    public CipherPub Encryption(BigInteger m, BigInteger h) {

        BigInteger r = new BigInteger(bitLength, new Random());

        CipherPub cc = new CipherPub();
        cc.T1 = (BigInteger.ONE.add(m.multiply(n)).mod(nsquare)).multiply(h.modPow(r, nsquare)).mod(nsquare);
        cc.T2 = g.modPow(r, nsquare);
        cc.PUB = h;
        return cc;
    }

    public Ciphertext Encryption(BigInteger m) {
        BigInteger r = new BigInteger(bitLength, new Random());

        Ciphertext cc = new Ciphertext();
        cc.T1 = (BigInteger.ONE.add(m.multiply(n)).mod(nsquare)).multiply(h.modPow(r, nsquare)).mod(nsquare);
        cc.T2 = g.modPow(r, nsquare);
        return cc;
    }


    public BigInteger SDecryption(Ciphertext c) {

        BigInteger u1 = lambda.modInverse(n);
        return c.T1.modPow(lambda, nsquare).subtract(BigInteger.ONE).divide(n).multiply(u1).mod(n);
    }

    public BigInteger SDecryption(CipherPub c) {
        BigInteger u1 = lambda.modInverse(n);
        return c.T1.modPow(lambda, nsquare).subtract(BigInteger.ONE).divide(n).multiply(u1).mod(n);
    }

    public Ciphertext1 AddPDec1(Ciphertext c, BigInteger hp) {
        Ciphertext1 cc = new Ciphertext1();
        BigInteger r = new BigInteger(bitLength, new Random());
        cc.T1 = (c.T1.multiply((hp.modPow(r, nsquare))).mod(nsquare));
        cc.T2 = (c.T2.multiply((g.modPow(r, nsquare))).mod(nsquare));
        cc.T3 = cc.T1.modPow(lambda1[0], nsquare);

        return cc;
    }

    public Ciphertext1 AddPDec1(CipherPub c) {
        Ciphertext1 cc = new Ciphertext1();
        BigInteger r = new BigInteger(bitLength, new Random());
        cc.T1 = (c.T1.multiply((c.PUB.modPow(r, nsquare))).mod(nsquare));
        cc.T2 = (c.T2.multiply((g.modPow(r, nsquare))).mod(nsquare));
        cc.T3 = cc.T1.modPow(lambda1[0], nsquare);

        return cc;
    }

    public Ciphertext1 AddPDec1(Ciphertext c) {
        Ciphertext1 cc = new Ciphertext1();
        BigInteger r = new BigInteger(bitLength, new Random());
        cc.T1 = (c.T1.multiply((Hsigma.modPow(r, nsquare))).mod(nsquare));
        cc.T2 = (c.T2.multiply((g.modPow(r, nsquare))).mod(nsquare));
        cc.T3 = cc.T1.modPow(lambda1[0], nsquare);

        return cc;
    }

    public BigInteger AddPDec2(Ciphertext1 c) {
        BigInteger cc = BigInteger.ZERO;
        cc = (c.T1.modPow(lambda1[1], nsquare)).multiply(c.T3).mod(nsquare);

        return cc.subtract(BigInteger.ONE).divide(n).mod(n);
    }

    public Ciphertext Refreash(Ciphertext c, BigInteger hp) {
        Ciphertext cc = new Ciphertext();
        BigInteger r = new BigInteger(bitLength, new Random());
        cc.T1 = (c.T1.multiply((hp.modPow(r, nsquare))).mod(nsquare));
        cc.T2 = (c.T2.multiply((g.modPow(r, nsquare))).mod(nsquare));

        return cc;
    }

    public CipherPub Refreash(CipherPub c) {
        CipherPub cc = new CipherPub();
        BigInteger r = new BigInteger(bitLength, new Random());
        cc.T1 = (c.T1.multiply((c.PUB.modPow(r, nsquare))).mod(nsquare));
        cc.T2 = (c.T2.multiply((g.modPow(r, nsquare))).mod(nsquare));
        cc.PUB = c.PUB;
        return cc;
    }



    public static final String param="{\"bitLength\":1024,\"KK1\":350604141496801280350024535035145383382990829838400004647004709941148689494473119615748477573198787106350655378818106327168612226624310136498154860863382600766141672140633525579823048271739361734405356464307935808327488220584645514852030364031533238217913405495822099620031324835472867205500530029655256641719089832594705889198390433284368792042896613070899967031880101642246385433606868108616409350257166489557316506526516777720433452935113189777812522422444402024144476961753958200054135145504534048396062532208680163394086847913980223226604682365913003799948208390000230241891344514411261262023023567807867911023000407571508883252213046449946455011757994757326123029297771379049730879613755110112560941004416205735913518090794073370780256721099605482069774004558285952753081434576870739670420833234837041885075186747346012424384455671997841225351972138174059280705476160820545361239888252677459605423250288676128579207942,\"nsquare\":7892804729567514904569734082192698551451651716987160036256976530003199225045807742561532175111537499677865011272007434605920746326294407391687751485793813065237770859268423066742298330425624778757553323006083129205586658978699625180144281955408441463765565677057246368310212950107560224542436116688450383922144934188348977005422554940653677675232929154050747002701598849252615621959688419429372933757681901730897446191503149421182095978418822479107590852343822299693029854151149827312319623807720573819463980283807201651962749073743567940452662664743077313809214249911709261408519220619059840937294897966014162319961,\"lambda\":44420729196985034704623258467533762092615865353292667461277950176731743331844694373908325731290803532007436528835720683842864720904700582134879230288791521875476849855844514682686000658833385155550771523918646599411895446778008915467044138248842068355037272176887668813755552622120042996304984346645560200822,\"S\":242721588892665415397239483757559064247750162319215978517128909184218632178674278181625651654746796291319543747584897954344743474352405907553715042517801862079980238515659118029649461162935812512007161861158400567010700075628887184963364658050930083963509057421765606444801016382949449432879136972728827669663540277091785412002488991962073636409533259471624381338870617192001843959678866545633740097767263595081660295826841831424887005642085996632823515244428342002738685781721952038924124145016532169386607419432125960758068283870698254356641875069342099770800252507088617142019418320653374179885350455233381717258183888418190955200743036548134837015449845320581244796720860867616565429702697299170912075119638821398168031678516943902809210034746600584768433450359873047318470408125570792453896881531173844429368836083832255200663147641455258128314245211912951557706140234509660828034262547917856887514482102000748421487124,\"X0\":42256628927527047063320373505988213964100873532888402666906631188337584724669196951172156441568198721896158216460198490102687273602707346356796637511514558685705995851961142047619250745611722412315396436384289468564912846026239822891141733788180690106075705396624663568626579354704871170271628332832693979,\"X1\":22949995050371510985255193138149351577834562151867968007943779972702136535122977385462362299461251091600230962273624933385799424619816277599398743676704085183419116814812943993974674335764143262467053850551791925880854599386969602700797201359816000199214448777598400787091423639340721000973962317152183397,\"X2\":37935805005096239948333179081936119688479061157019167489159168912726995957583205084751579515151585884417750302153007888998511065935158925823919150995455002239828437142593972537136885953042624712250174607591857326153806446725293785821268731921531551810321187745774324724271123470614417321340604817496160003,\"a\":12283962756686644788133785818481365629992503432479098271463334560068398906435362204843721071259246477469087323767207376959611462971620933023080433814802587,\"g\":891102270137160194140332032136558114107094969441119906133881134697634150673795097812813863674002386967017447072921920991668608294419747613108906342763167677008556198090535752406382841571768712876461491538954902263649465645025996975980016967506739818528658346942990382599021720013975283129866203466389203106956859283506236293708394727067958430016068307527972775179489528422883416382294066846954636671873966248215473574732678360688379602674071905425758363652822426446925957502219390544316470559592842830558384384289603472895700341440837334892840027717625798251860148363884963727052348633338061499837666338329597399970,\"lambda11\":242721588892665415397239483757559064247750162319215978517128909184218632178674278181625651654746796291319543747584897954344743474352405907553715042517801862079980238515659118029649461162935812512007161861158400567010700075628887184963364658050930083963509057421765606444801016382949449432879136972728827669663540277091785412002488991962073636409533259471624381338870617192001843959678866545633740097767263595081660295826841831424887005642085996632823515244428342002738685781721952038924124145016532169386607419432125960758068283870698254356641875069342099770800252507088617142019418320653374179885350455233381717258065301692556539391727003621696287083365371803328555052677771378694076034684967610520631971651527653917785179559414249564477224868511250059307927445606513504143172816084934496276859868729467808661099679944025672131593320602880177139312256730782463571232051514757157771265801668550230332149364703167876977537371,\"h\":6927155313668059911348372891361699025912896181611485573324545101368023596453122438856341956747890670943372293135463788786360782609024264558296337393391954577462275718196866815855721803217753572900572653124679354443220495758919985850474763813947555202001115137315539588822909268990932472704811918129810584595423016866872936704824772242705161401415891135470014148877746912570417512091194294661651014422461671465913568503154906671334946652047110858323075485526046884223408525854669916438028542381382016004963595349515181231087563110392252062303376527865715068554658939653447254335332104173205893623139058585723197793022,\"H0\":4749782583227237781000517662081520665571921776336277514142462408600577756695165631873924848287850932814170282273015565214616996996462862130861752017783218994149563108395745580706095289758372766454722163912979710779784604147171563500745693212965311217087085812280236002072991639239714694922232539594669493031123385383675494432356083660229092133861223298604163971892829394897420060369334827896351596249997685986291532407200769425342571338448490226640060668195680011492733059336352681832652609716953355306811988195269301558489846937724416210569983410148123877195009425733888161002690298641097328338726073513608570719223,\"lambda10\":118586725634415809016032926438549932084473517252689744043089488922489395017729688650280103468111167480382852119102694338331985166235350525460506004753359543175297592040636296177037012801706035768269156139806583069069827038575080989001988481130487986474088719752503056768460879367626555365117398832871443949753,\"H1\":1869490705653261675303759463277769733782248284084804635812759428865876467719361218493018094152864878040723616522677346729605353326932074717827911362211869015130132412723656659256936942442510440450197619042331023679329609316359872748367484625240486771231682606324963759889536684165982044085103976081730020226123477160952974114322981559491112167086460033587967397686701361556785614674124202473456120253219491949462430990220957790879849484968390136472859098743259227519390936685588536547076082924327319837950321885238157575991889923482215497506864914162124404188204618140102821248533346366410608164856028915137273570772,\"g1\":2,\"KKK\":5464151383384756371510203317767605241308877419242350305557198678905444739828764876616778404988665759949936913424708690777443042759150122677327508279355391906561632298001456398139236311669801590976703548104507863875629227197951580854190023734134026943518941668668359042489614132805548275700431112221619922510725756386467054144348455605173955968005069527246987676054227563549339071159308799832578013797511939949058944638983909992820946662219816165360470750392908833245133426688216130339691342872259356276172169775295945467691199458361432572848899087090393300326440296385185397987367484605429454963181529443014102473342,\"H2\":6837078366283398859406765803513630063597669789967897071280663246446922977222536126792422642921695339983103684461919741658202874484181760857499370063433893802217156474392051690280207461750271437628075055091958069940812141783907465410771420272612979186710470581989095400804067167567188507591439851082876018948433336024926417076918147274583598496523150803096537114279908881355402869033155123017705542330188411713858206010861462098829316312871305913154117165335954358988016003037085118832488897013726459051248873990884632108007884598570512430505912910803513290339956795919472880512790597677502866684813690713969209794603,\"n\":88841458393970069409246516935067524185231730706585334922555900353463486663689388747816651462581607064014873057671441367685729441809401164269758460577583062829325462427145967215165141813994227829877809046644281207140235571358984398852472678257016581217920598968821094497776517432722271102933545539534980450469,\"p\":8071327276067507243292109689117591302815680386250334991474208688609253275846891270656495285617881068892085973367714792997485798500865176183161266482737123,\"q\":11007044486647949694557683451378736154703095879748471996534107756068549690721027113745264046826626777162529072389155472414702683684245147393684977377311703,\"x\":8999383168323922974962749740498909747852600588189003627212317664933897274039690201206606953259768300335303121022355554786767381426631109118089910520566441,\"x1\":85495847591920584905990519547975984858419942707663218606308778826213526641523,\"Xsigma\":103142428982994797996908745726073685230414496841775538164009580073766717217375379421386098256181035697914139480886831312486997764157682549780114532183673646108953549809368058578730811034418490387032624894527938720599573892138503211413207667069528242115611341919997389079989126464660009492586195467481037379,\"Hsigma\":1939956792097497169845496376869859737128234243049154897377354294421899523470570706881703054502486789493095247054146097086195671290016716136800202503820044406891388936122824348617609162201443424396376590992410616577066088351126605451363552793306821446750866265490866834947339011527863897805631004991328160765601902268479571761718791975800386590436366830463110788669865425208327740515835578743893249133628336367852566358904591043042495809755719998189808740015493978896715027040875204592809062553043833222738841251616016504915753066913815559486006749487563758890827685610873364834881053963540988729517477587324730424010}";
}
